// –ß–∏—Å–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–µ —á–∏ –Ω—ñ (is-prime)

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é isPrime(n), —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–∏–º.

// üìå –ü—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ ‚Äî —Ü–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∑–∞ 1, —è–∫–µ –¥—ñ–ª–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ 1 —ñ –Ω–∞ —Å–µ–±–µ.

// function isPrime(n) {
//   if (n <= 1) return false;
//   for (let i = 2; i < n; i++) {
//     if (n % i === 0) {
//       return false;
//     }
//   }
//   return true;
// }

// ~Version 2

function isPrime(n) {
  if (n <= 1) return false;
  for (let i = 2; i <= Math.sqrt(n); i++) {
    if (n % i === 0) {
      return false;
    }
  }
  return true;
}

console.log(isPrime(2)); // true
console.log(isPrime(3)); // true
console.log(isPrime(4)); // false
console.log(isPrime(17)); // true
console.log(isPrime(20)); // false
